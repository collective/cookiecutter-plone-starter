name: Backend CI

on:
  push:
    paths:
      - "backend/**"
      - ".github/workflows/backend.yml"


jobs:

  black:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2

      - name: Run check
        uses: plone/code-analysis-action@v2
        with:
          base_dir: 'backend'
          check: 'black'

  flake8:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2

      - name: Run check
        uses: plone/code-analysis-action@v2
        with:
          base_dir: 'backend'
          check: 'flake8'

  isort:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2

      - name: Run check
        uses: plone/code-analysis-action@v2
        with:
          base_dir: 'backend'
          check: 'isort'

  zpretty:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2

      - name: Run check
        uses: plone/code-analysis-action@v2
        with:
          base_dir: 'backend'
          check: 'zpretty'

  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python:
          - 3.9
        plone:
          - "{{ cookiecutter.plone_version }}"

    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v2

      - name: Setup Plone {{"${{ matrix.plone }}"}} with Python {{"${{ matrix.python }}"}}
        uses: plone/setup-plone@v1.0.0
        with:
          python-version: ${{"{{ matrix.python }}"}}
          plone-version: ${{"{{ matrix.plone }}"}}

      - name: Install package
        run: |
          pip install "plone.app.testing" -c https://dist.plone.org/release/{{"${{ matrix.plone }}"}}/constraints.txt
          pip install -e "src/{{ cookiecutter.python_package_name }}[test]"

      - name: Run tests
        run: |
          PYTHONWARNINGS=ignore zope-testrunner --auto-color --auto-progress --test-path src/{{ cookiecutter.python_package_name }}/src/

  release:
    runs-on: ubuntu-latest
    needs: [black, flake8, isort, zpretty, tests]

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            {{ cookiecutter.__docker_image_prefix }}{{ cookiecutter.github_organization}}/{{ cookiecutter.project_slug }}-backend
          labels: |
            org.label-schema.docker.cmd=docker run -d -p 8080:8080 {{ cookiecutter.__docker_image_prefix }}{{ cookiecutter.github_organization}}/{{ cookiecutter.project_slug }}-backend:latest
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable=${{"{{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}"}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          {%- if cookiecutter.container_registry == 'Docker Hub' %}
          username: {{"${{ secrets.DOCKERHUB_USERNAME }}"}}
          password: {{"${{ secrets.DOCKERHUB_TOKEN }}"}}
          {%- endif %}
          {%- if cookiecutter.container_registry == 'GitHub' %}
          registry: ghcr.io
          username: {{"${{ github.actor }}"}}
          password: {{"${{ secrets.GITHUB_TOKEN }}"}}
          {%- endif %}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64
          context: backend
          file: backend/Dockerfile
          push: {{"${{ github.event_name != 'pull_request' }}"}}
          tags: {{"${{ steps.meta.outputs.tags }}"}}
          labels: {{"${{ steps.meta.outputs.labels }}"}}
