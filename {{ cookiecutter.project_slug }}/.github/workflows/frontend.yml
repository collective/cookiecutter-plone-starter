name: Frontend CI

on:
  push:
    paths:
      - "frontend/**"
      - ".github/workflows/frontend.yml"

env:
  node-version: 16.x

jobs:

  eslint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2

      - name: Use Node.js {{"${{ env.node-version }}"}}
        uses: actions/setup-node@v1
        with:
          node-version: {{"${{ env.node-version }}"}}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache
        with:
          path: ${{"{{ steps.yarn-cache-dir-path.outputs.dir }}"}}
          key: ${{"{{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}"}}
          restore-keys: |
            ${{"{{"}} runner.os {{"}}"}}-yarn-

      - name: Install packages
        run: yarn install --frozen-lockfile

      - name: Lint
        run: yarn run lint:ci

      - name: i18n
        run: yarn run i18n:ci

  prettier:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2

      - name: Run Prettier
        run: npx prettier@2.0.5 --single-quote --check 'src/**/*.{js,jsx,ts,tsx,css,scss}' --config=package.json


  i18n:
    name: i18n sync
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2

      - name: Use Node.js {{"${{ env.node-version }}"}}
        uses: actions/setup-node@v1
        with:
          node-version: {{"${{ env.node-version }}"}}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache
        with:
          path: {{"${{ steps.yarn-cache-dir-path.outputs.dir }}"}}
          key: {{"${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}"}}
          restore-keys: |
            {{"${{ runner.os }}-yarn-"}}

      - name: Install packages
        run: yarn install --frozen-lockfile

      - name: Test i18n sync
        run: make i18n-ci

  unit:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2

      - name: Use Node.js {{"${{ env.node-version }}"}}
        uses: actions/setup-node@v1
        with:
          node-version: {{"${{ env.node-version }}"}}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache
        with:
          path: {{"${{ steps.yarn-cache-dir-path.outputs.dir }}"}}
          key: {{"${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}"}}
          restore-keys: |
            {{"${{ runner.os }}-yarn-"}}

      - name: Install packages
        run: yarn install --frozen-lockfile

      - name: Test
        run: make test

  release:
    runs-on: ubuntu-latest
    needs: [eslint, prettier, i18n, unit]

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            {{ cookiecutter.__docker_image_prefix }}{{ cookiecutter.github_organization}}/{{ cookiecutter.project_slug }}-frontend
          labels: |
            org.label-schema.docker.cmd=docker run -d -p 3000:3000 {{ cookiecutter.__docker_image_prefix }}{{ cookiecutter.github_organization}}/{{ cookiecutter.project_slug }}-frontend:latest
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable=${{"{{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}"}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          {%- if cookiecutter.container_registry == 'Docker Hub' %}
          username: {{"${{ secrets.DOCKERHUB_USERNAME }}"}}
          password: {{"${{ secrets.DOCKERHUB_TOKEN }}"}}
          {%- endif %}
          {%- if cookiecutter.container_registry == 'GitHub' %}
          registry: ghcr.io
          username: {{"${{ github.actor }}"}}
          password: {{"${{ secrets.GITHUB_TOKEN }}"}}
          {%- endif %}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64
          context: frontend/
          file: frontend/Dockerfile
          push: {{"${{ github.event_name != 'pull_request' }}"}}
          tags: {{"${{ steps.meta.outputs.tags }}"}}
          labels: ${{"${{ steps.meta.outputs.labels }}"}}
